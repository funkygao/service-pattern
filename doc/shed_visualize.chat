如下是我的日志，现在请你根据该日志内容和格式开发一个可视化python脚本，输出随着时间变化的qps/shed/cpu/smooth/latency/exhausted的曲线，要求：
1. 使用panda, matplotlib.pyplot
2. 该日志格式可能会增加新的数据，但保证新增加的都是在每行日志尾部增加，你开发的脚步要兼容这个场景，例如：
现在的日志行：
```
2024-05-17 09:30:31,143 pool-2-thread-4                [io.github.workload.overloading.mock.SysloadAdaptiveSimulator] cpu:0.96, +rand:0.67, smooth:0.96, qps:128.0, req:129, shed:0, latency:145, inflight:1, exhausted:false
```
将来可能是这样：
```
2024-05-17 09:30:31,143 pool-2-thread-4                [io.github.workload.overloading.mock.SysloadAdaptiveSimulator] cpu:0.96, +rand:0.67, smooth:0.96, qps:128.0, req:129, shed:0, latency:145, inflight:1, exhausted:false, foo:1, bar:88, egg
```
3. 各个指标解释：
- qps：在该时间点(秒)被允许处理的请求总数量，不包括被拒绝的量
- shed：在该时间点(秒)被拒绝的请求总数量，这是因为我们有过载保护算法：当系统压力变大时，系统会主动拒绝部分请求，即shed
- cpu：该时间点的 cpu usage，取值是百分比，例如 0.6表示60%，在绘图时要变换为60。下面的smooth也做相同的变换处理
- smooth：该时间点的平滑处理后的 cpu usage，过载保护算法实际使用的是该值，而不是cpu
- latency：该时间点所有接受的请求的平均处理时长，以毫秒为单位
- exhausted：如果为true，表示在该时刻出现了线程池耗尽
4. X坐标使用基于时间的秒数，而不是具体的时刻值，即X坐标从0开始，后面的每一个点代表距离起始时间经过了多少秒
5. qps的y轴输出时，要把该时间点的 shed 数量加上：表示 (接受的请求量 + 拒绝的请求量) 
6. 有一个参数 Overload Threshold，它表示 smooth 的阈值，现在取值75，即75%，超过该阈值就会进入过载状态，它要以一个灰色的比较粗的横向虚线表示，加粗。此外，要把该变量值放在你生成的脚步头部，以便于随时修改
7. 为每张图生成图例，图例要放在图的右上侧，而且图例里的线是可以点击的，以此来 show/hide 对应的线
8. 图的大小要适应屏幕大小，要考虑到qps/shed/etc那个图，由于时间(秒数)可能比较长，例如可能超过60分钟，也可能比较短，例如5分钟，要自适应地绘制图：不能太稠密，否则人就看不清楚了
9. 保证生成两个图，上下放置，上面的图包括使用双y坐标，指标包括：cpu/smooth/qps/shed，还有1个tag形式的exhausted；下面的图，指标包括：latency。smooth的颜色red，cpu使用虚线，而且比较透明，线细，shed颜色orange，其他颜色你根据其语义决定，qps/shed使用同一个y坐标，cpu是1条线，smooth是1条线，cpu/smooth使用同一个y坐标，而且cpu/smooth的y值要做百分百处理，即把日志里的值乘以100
10. cpu的图，确保使用双y坐标

直接输出完整的可以运行的代码，不必解释。
假设你生成的代码被保存到 doc/shed_v1.py，是这样使用的：
```bash
cat test/log | grep -w cpu | python doc/shed_v1.py
```

补充：类似下面的解析日志代码是可以工作的，供你参考：
```python
# 读取数据
df = pd.read_csv(StringIO(log_data), sep=r"\s+(?=\[)", engine='python', names=["datetime_thread", "log"], usecols=[0, 1])

# 处理数据
df[["datetime", "thread"]] = df["datetime_thread"].str.extract(r"(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3}) (.*)")
df["datetime"] = pd.to_datetime(df["datetime"], format="%Y-%m-%d %H:%M:%S,%f")
df["seconds"] = (df["datetime"] - df["datetime"].iloc[0]).dt.total_seconds()
df["cpu"] = df["log"].str.extract(r"cpu:(\d\.\d+)")[0].astype(float) * 100  # 转换为百分比
df["smooth"] = df["log"].str.extract(r"smooth:(\d\.\d+)")[0].astype(float) * 100  # 转换为百分比
df["qps"] = df["log"].str.extract(r"qps:(\d+\.\d+)")[0].astype(float)
df["req"] = df["log"].str.extract(r"req:(\d+)")[0].astype(int)
df["shed"] = df["log"].str.extract(r"shed:(\d+)")[0].astype(int)
df["latency"] = df["log"].str.extract(r"latency:(\d+)")[0].astype(int)
df["exhausted"] = df["log"].str.extract(r"exhausted:(\w+)")[0] == 'true'
```

日志内容：
```
2024-05-17 09:30:31,143 pool-2-thread-4                [io.github.workload.overloading.mock.SysloadAdaptiveSimulator] cpu:0.96, +rand:0.67, smooth:0.96, qps:128.0, req:129, shed:0, latency:145, inflight:1, exhausted:false
2024-05-17 09:30:32,149 pool-2-thread-14               [io.github.workload.overloading.mock.SysloadAdaptiveSimulator] cpu:0.60, +rand:0.27, smooth:0.87, qps:170.0, req:307, shed:7, latency:140, inflight:1, exhausted:false
2024-05-17 09:30:33,158 pool-2-thread-13               [io.github.workload.overloading.mock.SysloadAdaptiveSimulator] cpu:0.78, +rand:0.45, smooth:0.84, qps:164.0, req:490, shed:17, latency:149, inflight:1, exhausted:false
2024-05-17 09:30:34,161 pool-2-thread-2                [io.github.workload.overloading.mock.SysloadAdaptiveSimulator] cpu:0.73, +rand:0.41, smooth:0.82, qps:160.0, req:677, shed:26, latency:147, inflight:1, exhausted:false
2024-05-17 09:30:35,168 pool-2-thread-1                [io.github.workload.overloading.mock.SysloadAdaptiveSimulator] cpu:0.34, +rand:0.01, smooth:0.70, qps:165.0, req:887, shed:43, latency:144, inflight:1, exhausted:false
2024-05-17 09:30:36,180 pool-2-thread-10               [io.github.workload.overloading.mock.SysloadAdaptiveSimulator] cpu:0.55, +rand:0.21, smooth:0.66, qps:178.0, req:1108, shed:41, latency:135, inflight:1, exhausted:false
2024-05-17 09:30:37,182 pool-2-thread-18               [io.github.workload.overloading.mock.SysloadAdaptiveSimulator] cpu:0.75, +rand:0.42, smooth:0.68, qps:159.0, req:1303, shed:34, latency:145, inflight:1, exhausted:false
```
